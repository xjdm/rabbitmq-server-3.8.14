name: Test - Erlang 22.3
on: push
jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    outputs:
      build_start: ${{ steps.buildevents.outputs.build_start }}
      branch_or_tag_name: ${{ steps.buildevents.outputs.branch_or_tag_name }}
    steps:
    - name: RECORD BUILD START
      id: buildevents
      run: |
        echo "::set-output name=build_start::$(date +%s)"
        branch_or_tag_name=${GITHUB_REF#refs/*/}
        echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    - name: PREPARE BUILD IMAGE
      uses: docker/build-push-action@v2
      with:
        load: true
        file: ci/dockerfiles/ci
        tags: eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }}
        build-args: |
          ERLANG_VERSION=22.3
          GITHUB_RUN_ID=${{ github.run_id }}
          BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }}
          GITHUB_SHA=${{ github.sha }}
          base_rmq_ref=v3.8.x
          current_rmq_ref=${{ steps.buildevents.outputs.branch_or_tag_name }}
          RABBITMQ_VERSION=v3.8.0
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: SAVE CI DOCKER IMAGE IN CACHE
      run: |
        docker save --output ci.tar eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }}
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - name: RECORD STEP FINISH
      run: |
        docker run \
          --env project=prepare \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.build_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/collect.sh
  xref:
    name: xref
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD XREF START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    - name: PULL IMAGE
      run: |
        docker pull eu.gcr.io/cf-rabbitmq-core/ci-base:22.3
    - name: RUN XREF rabbit_common
      run: |
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbit
      run: |
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp_client
      run: |
        docker run \
          --env project=amqp_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_client
      run: |
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF amqp10_common
      run: |
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_amqp1_0
      run: |
        docker run \
          --env project=rabbitmq_amqp1_0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_cache
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_http
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_ldap
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_ldap \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_backend_oauth2
      run: |
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_auth_mechanism_ssl
      run: |
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_aws
      run: |
        docker run \
          --env project=rabbitmq_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_cli
      run: |
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_consistent_hash_exchange
      run: |
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_event_exchange
      run: |
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation
      run: |
        docker run \
          --env project=rabbitmq_federation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_federation_management
      run: |
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_jms_topic_exchange
      run: |
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management
      run: |
        docker run \
          --env project=rabbitmq_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_management_agent
      run: |
        docker run \
          --env project=rabbitmq_management_agent \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_mqtt
      run: |
        docker run \
          --env project=rabbitmq_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_common
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_aws
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_k8s
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_consul
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_peer_discovery_etcd
      run: |
        docker run \
          --env project=rabbitmq_peer_discovery_etcd \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_prometheus
      run: |
        docker run \
          --env project=rabbitmq_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_random_exchange
      run: |
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_recent_history_exchange
      run: |
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_sharding
      run: |
        docker run \
          --env project=rabbitmq_sharding \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel
      run: |
        docker run \
          --env project=rabbitmq_shovel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_shovel_management
      run: |
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_stomp
      run: |
        docker run \
          --env project=rabbitmq_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_top
      run: |
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_tracing
      run: |
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_trust_store
      run: |
        docker run \
          --env project=rabbitmq_trust_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_dispatch
      run: |
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt
      run: |
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_mqtt_examples
      run: |
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp
      run: |
        docker run \
          --env project=rabbitmq_web_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RUN XREF rabbitmq_web_stomp_examples
      run: |
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}:/workspace/rabbitmq \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/xref.sh
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=xref \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/ci/scripts:/workspace/rabbitmq/ci/scripts \
          --workdir /workspace/rabbitmq \
          eu.gcr.io/cf-rabbitmq-core/ci-base:22.3 \
          ci/scripts/collect.sh
  rabbit_common:
    name: rabbit_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbit_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbit_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbit-checks:
    name: rabbit-checks
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    outputs:
      step_start: ${{ steps.buildevents.outputs.step_start }}
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: VALIDATE KNOWN CT SUITES
      env:
        project: rabbit
      run: |
        ci/scripts/validate-workflow.sh amqqueue_backward_compatibility backing_queue channel_interceptor channel_operation_timeout cluster cluster_rename clustering_management config_schema confirms_rejects consumer_timeout crashing_queues dead_lettering definition_import disconnect_detected_during_alarm dynamic_ha dynamic_qq eager_sync feature_flags lazy_queue list_consumers_sanity_check list_queues_online_and_offline maintenance_mode many_node_ha message_size_limit metrics mirrored_supervisor msg_store peer_discovery_classic_config peer_discovery_dns per_user_connection_channel_limit per_user_connection_channel_limit_partitions per_user_connection_channel_tracking per_user_connection_tracking per_vhost_connection_limit per_vhost_connection_limit_partitions per_vhost_msg_store per_vhost_queue_limit policy priority_queue priority_queue_recovery product_info proxy_protocol publisher_confirms_parallel queue_length_limits queue_master_location queue_parallel quorum_queue rabbit_core_metrics_gc rabbit_fifo rabbit_fifo_int rabbit_fifo_prop rabbit_fifo_v0 rabbitmq_queues_cli_integration rabbitmqctl_integration rabbitmqctl_shutdown signal_handling simple_ha single_active_consumer sup_delayed_restart sync_detection term_to_binary_compat_prop topic_permission unit_access_control unit_access_control_authn_authz_context_propagation unit_access_control_credential_validation unit_amqp091_content_framing unit_amqp091_server_properties unit_app_management unit_cluster_formation_locking_mocks unit_collections unit_config_value_encryption unit_connection_tracking unit_credit_flow unit_disk_monitor unit_disk_monitor_mocks unit_file_handle_cache unit_gen_server2 unit_gm unit_log_config unit_log_management unit_operator_policy unit_pg_local unit_plugin_directories unit_plugin_versioning unit_policy_validators unit_priority_queue unit_queue_consumers unit_stats_and_metrics unit_supervisor2 unit_vm_memory_monitor upgrade_preparation vhost
    - name: FETCH ci DOCKER IMAGE CACHE
      uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD ci DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN CHECKS
      run: |
        docker build . \
          --file ci/dockerfiles/ci-dep \
          --build-arg IMAGE_TAG=erlang-22.3-rabbitmq-${{ github.sha }} \
          --build-arg BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --build-arg project=rabbit \
          --tag eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }}
    - name: FETCH ci-rabbit DOCKER IMAGE CACHE
      uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: SAVE CI DOCKER IMAGE IN CACHE
      run: |
        docker save --output ci-rabbit.tar eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }}
  rabbit-ct-amqqueue_backward_compatibility:
    name: rabbit-ct-amqqueue_backward_compatibility
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-amqqueue_backward_compatibility
      id: tests
      run: |
        mkdir ct-amqqueue_backward_compatibility-logs && chmod 777 ct-amqqueue_backward_compatibility-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=amqqueue_backward_compatibility \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-amqqueue_backward_compatibility-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-amqqueue_backward_compatibility-logs
        path: ct-amqqueue_backward_compatibility-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-amqqueue_backward_compatibility [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-amqqueue_backward_compatibility-logs-v3.7.28 && chmod 777 ct-amqqueue_backward_compatibility-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=amqqueue_backward_compatibility \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-amqqueue_backward_compatibility-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-amqqueue_backward_compatibility-logs-mixed-v3.7.28
        path: ct-amqqueue_backward_compatibility-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-amqqueue_backward_compatibility [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-amqqueue_backward_compatibility-logs-v3.8.9 && chmod 777 ct-amqqueue_backward_compatibility-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=amqqueue_backward_compatibility \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-amqqueue_backward_compatibility-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-amqqueue_backward_compatibility-logs-mixed-v3.8.9
        path: ct-amqqueue_backward_compatibility-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-backing_queue:
    name: rabbit-ct-backing_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-backing_queue
      id: tests
      run: |
        mkdir ct-backing_queue-logs && chmod 777 ct-backing_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=backing_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-backing_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-backing_queue-logs
        path: ct-backing_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-backing_queue [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-backing_queue-logs-v3.7.28 && chmod 777 ct-backing_queue-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=backing_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-backing_queue-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-backing_queue-logs-mixed-v3.7.28
        path: ct-backing_queue-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-backing_queue [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-backing_queue-logs-v3.8.9 && chmod 777 ct-backing_queue-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=backing_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-backing_queue-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-backing_queue-logs-mixed-v3.8.9
        path: ct-backing_queue-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-channel_interceptor:
    name: rabbit-ct-channel_interceptor
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-channel_interceptor
      id: tests
      run: |
        mkdir ct-channel_interceptor-logs && chmod 777 ct-channel_interceptor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_interceptor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-channel_interceptor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-channel_interceptor-logs
        path: ct-channel_interceptor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_interceptor [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-channel_interceptor-logs-v3.7.28 && chmod 777 ct-channel_interceptor-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_interceptor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-channel_interceptor-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-channel_interceptor-logs-mixed-v3.7.28
        path: ct-channel_interceptor-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_interceptor [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-channel_interceptor-logs-v3.8.9 && chmod 777 ct-channel_interceptor-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_interceptor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-channel_interceptor-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-channel_interceptor-logs-mixed-v3.8.9
        path: ct-channel_interceptor-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-channel_operation_timeout:
    name: rabbit-ct-channel_operation_timeout
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-channel_operation_timeout
      id: tests
      run: |
        mkdir ct-channel_operation_timeout-logs && chmod 777 ct-channel_operation_timeout-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_operation_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-channel_operation_timeout-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-channel_operation_timeout-logs
        path: ct-channel_operation_timeout-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_operation_timeout [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-channel_operation_timeout-logs-v3.7.28 && chmod 777 ct-channel_operation_timeout-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_operation_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-channel_operation_timeout-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-channel_operation_timeout-logs-mixed-v3.7.28
        path: ct-channel_operation_timeout-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-channel_operation_timeout [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-channel_operation_timeout-logs-v3.8.9 && chmod 777 ct-channel_operation_timeout-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=channel_operation_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-channel_operation_timeout-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-channel_operation_timeout-logs-mixed-v3.8.9
        path: ct-channel_operation_timeout-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-cluster:
    name: rabbit-ct-cluster
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-cluster
      id: tests
      run: |
        mkdir ct-cluster-logs && chmod 777 ct-cluster-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-cluster-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-cluster-logs
        path: ct-cluster-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-cluster [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-cluster-logs-v3.7.28 && chmod 777 ct-cluster-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-cluster-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-cluster-logs-mixed-v3.7.28
        path: ct-cluster-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-cluster [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-cluster-logs-v3.8.9 && chmod 777 ct-cluster-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-cluster-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-cluster-logs-mixed-v3.8.9
        path: ct-cluster-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-cluster_rename:
    name: rabbit-ct-cluster_rename
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-cluster_rename
      id: tests
      run: |
        mkdir ct-cluster_rename-logs && chmod 777 ct-cluster_rename-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster_rename \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-cluster_rename-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-cluster_rename-logs
        path: ct-cluster_rename-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-cluster_rename [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-cluster_rename-logs-v3.7.28 && chmod 777 ct-cluster_rename-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster_rename \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-cluster_rename-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-cluster_rename-logs-mixed-v3.7.28
        path: ct-cluster_rename-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-cluster_rename [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-cluster_rename-logs-v3.8.9 && chmod 777 ct-cluster_rename-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=cluster_rename \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-cluster_rename-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-cluster_rename-logs-mixed-v3.8.9
        path: ct-cluster_rename-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-clustering_management:
    name: rabbit-ct-clustering_management
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-clustering_management
      id: tests
      run: |
        mkdir ct-clustering_management-logs && chmod 777 ct-clustering_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=clustering_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-clustering_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-clustering_management-logs
        path: ct-clustering_management-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-clustering_management [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-clustering_management-logs-v3.7.28 && chmod 777 ct-clustering_management-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=clustering_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-clustering_management-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-clustering_management-logs-mixed-v3.7.28
        path: ct-clustering_management-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-clustering_management [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-clustering_management-logs-v3.8.9 && chmod 777 ct-clustering_management-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=clustering_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-clustering_management-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-clustering_management-logs-mixed-v3.8.9
        path: ct-clustering_management-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-config_schema:
    name: rabbit-ct-config_schema
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-config_schema
      id: tests
      run: |
        mkdir ct-config_schema-logs && chmod 777 ct-config_schema-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=config_schema \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-config_schema-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-config_schema-logs
        path: ct-config_schema-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-config_schema [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-config_schema-logs-v3.7.28 && chmod 777 ct-config_schema-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=config_schema \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-config_schema-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-config_schema-logs-mixed-v3.7.28
        path: ct-config_schema-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-config_schema [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-config_schema-logs-v3.8.9 && chmod 777 ct-config_schema-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=config_schema \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-config_schema-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-config_schema-logs-mixed-v3.8.9
        path: ct-config_schema-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-confirms_rejects:
    name: rabbit-ct-confirms_rejects
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-confirms_rejects
      id: tests
      run: |
        mkdir ct-confirms_rejects-logs && chmod 777 ct-confirms_rejects-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=confirms_rejects \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-confirms_rejects-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-confirms_rejects-logs
        path: ct-confirms_rejects-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-confirms_rejects [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-confirms_rejects-logs-v3.7.28 && chmod 777 ct-confirms_rejects-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=confirms_rejects \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-confirms_rejects-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-confirms_rejects-logs-mixed-v3.7.28
        path: ct-confirms_rejects-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-confirms_rejects [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-confirms_rejects-logs-v3.8.9 && chmod 777 ct-confirms_rejects-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=confirms_rejects \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-confirms_rejects-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-confirms_rejects-logs-mixed-v3.8.9
        path: ct-confirms_rejects-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-consumer_timeout:
    name: rabbit-ct-consumer_timeout
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-consumer_timeout
      id: tests
      run: |
        mkdir ct-consumer_timeout-logs && chmod 777 ct-consumer_timeout-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=consumer_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-consumer_timeout-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-consumer_timeout-logs
        path: ct-consumer_timeout-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-consumer_timeout [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-consumer_timeout-logs-v3.7.28 && chmod 777 ct-consumer_timeout-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=consumer_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-consumer_timeout-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-consumer_timeout-logs-mixed-v3.7.28
        path: ct-consumer_timeout-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-consumer_timeout [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-consumer_timeout-logs-v3.8.9 && chmod 777 ct-consumer_timeout-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=consumer_timeout \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-consumer_timeout-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-consumer_timeout-logs-mixed-v3.8.9
        path: ct-consumer_timeout-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-crashing_queues:
    name: rabbit-ct-crashing_queues
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-crashing_queues
      id: tests
      run: |
        mkdir ct-crashing_queues-logs && chmod 777 ct-crashing_queues-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=crashing_queues \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-crashing_queues-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-crashing_queues-logs
        path: ct-crashing_queues-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-crashing_queues [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-crashing_queues-logs-v3.7.28 && chmod 777 ct-crashing_queues-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=crashing_queues \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-crashing_queues-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-crashing_queues-logs-mixed-v3.7.28
        path: ct-crashing_queues-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-crashing_queues [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-crashing_queues-logs-v3.8.9 && chmod 777 ct-crashing_queues-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=crashing_queues \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-crashing_queues-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-crashing_queues-logs-mixed-v3.8.9
        path: ct-crashing_queues-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-dead_lettering:
    name: rabbit-ct-dead_lettering
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-dead_lettering
      id: tests
      run: |
        mkdir ct-dead_lettering-logs && chmod 777 ct-dead_lettering-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dead_lettering \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dead_lettering-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-dead_lettering-logs
        path: ct-dead_lettering-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-dead_lettering [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-dead_lettering-logs-v3.7.28 && chmod 777 ct-dead_lettering-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dead_lettering \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-dead_lettering-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-dead_lettering-logs-mixed-v3.7.28
        path: ct-dead_lettering-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-dead_lettering [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-dead_lettering-logs-v3.8.9 && chmod 777 ct-dead_lettering-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dead_lettering \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-dead_lettering-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-dead_lettering-logs-mixed-v3.8.9
        path: ct-dead_lettering-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-definition_import:
    name: rabbit-ct-definition_import
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-definition_import
      id: tests
      run: |
        mkdir ct-definition_import-logs && chmod 777 ct-definition_import-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=definition_import \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-definition_import-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-definition_import-logs
        path: ct-definition_import-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-definition_import [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-definition_import-logs-v3.7.28 && chmod 777 ct-definition_import-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=definition_import \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-definition_import-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-definition_import-logs-mixed-v3.7.28
        path: ct-definition_import-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-definition_import [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-definition_import-logs-v3.8.9 && chmod 777 ct-definition_import-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=definition_import \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-definition_import-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-definition_import-logs-mixed-v3.8.9
        path: ct-definition_import-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-disconnect_detected_during_alarm:
    name: rabbit-ct-disconnect_detected_during_alarm
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-disconnect_detected_during_alarm
      id: tests
      run: |
        mkdir ct-disconnect_detected_during_alarm-logs && chmod 777 ct-disconnect_detected_during_alarm-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=disconnect_detected_during_alarm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-disconnect_detected_during_alarm-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-disconnect_detected_during_alarm-logs
        path: ct-disconnect_detected_during_alarm-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-disconnect_detected_during_alarm [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-disconnect_detected_during_alarm-logs-v3.7.28 && chmod 777 ct-disconnect_detected_during_alarm-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=disconnect_detected_during_alarm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-disconnect_detected_during_alarm-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-disconnect_detected_during_alarm-logs-mixed-v3.7.28
        path: ct-disconnect_detected_during_alarm-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-disconnect_detected_during_alarm [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-disconnect_detected_during_alarm-logs-v3.8.9 && chmod 777 ct-disconnect_detected_during_alarm-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=disconnect_detected_during_alarm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-disconnect_detected_during_alarm-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-disconnect_detected_during_alarm-logs-mixed-v3.8.9
        path: ct-disconnect_detected_during_alarm-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-dynamic_ha:
    name: rabbit-ct-dynamic_ha
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-dynamic_ha
      id: tests
      run: |
        mkdir ct-dynamic_ha-logs && chmod 777 ct-dynamic_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dynamic_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_ha-logs
        path: ct-dynamic_ha-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-dynamic_ha [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-dynamic_ha-logs-v3.7.28 && chmod 777 ct-dynamic_ha-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-dynamic_ha-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_ha-logs-mixed-v3.7.28
        path: ct-dynamic_ha-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-dynamic_ha [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-dynamic_ha-logs-v3.8.9 && chmod 777 ct-dynamic_ha-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-dynamic_ha-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_ha-logs-mixed-v3.8.9
        path: ct-dynamic_ha-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-dynamic_qq:
    name: rabbit-ct-dynamic_qq
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-dynamic_qq
      id: tests
      run: |
        mkdir ct-dynamic_qq-logs && chmod 777 ct-dynamic_qq-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_qq \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-dynamic_qq-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_qq-logs
        path: ct-dynamic_qq-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-dynamic_qq [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-dynamic_qq-logs-v3.7.28 && chmod 777 ct-dynamic_qq-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_qq \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-dynamic_qq-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_qq-logs-mixed-v3.7.28
        path: ct-dynamic_qq-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-dynamic_qq [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-dynamic_qq-logs-v3.8.9 && chmod 777 ct-dynamic_qq-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=dynamic_qq \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-dynamic_qq-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-dynamic_qq-logs-mixed-v3.8.9
        path: ct-dynamic_qq-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-eager_sync:
    name: rabbit-ct-eager_sync
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-eager_sync
      id: tests
      run: |
        mkdir ct-eager_sync-logs && chmod 777 ct-eager_sync-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=eager_sync \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-eager_sync-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-eager_sync-logs
        path: ct-eager_sync-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-eager_sync [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-eager_sync-logs-v3.7.28 && chmod 777 ct-eager_sync-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=eager_sync \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-eager_sync-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-eager_sync-logs-mixed-v3.7.28
        path: ct-eager_sync-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-eager_sync [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-eager_sync-logs-v3.8.9 && chmod 777 ct-eager_sync-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=eager_sync \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-eager_sync-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-eager_sync-logs-mixed-v3.8.9
        path: ct-eager_sync-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-feature_flags:
    name: rabbit-ct-feature_flags
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-feature_flags
      id: tests
      run: |
        mkdir ct-feature_flags-logs && chmod 777 ct-feature_flags-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=feature_flags \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-feature_flags-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-feature_flags-logs
        path: ct-feature_flags-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-feature_flags [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-feature_flags-logs-v3.7.28 && chmod 777 ct-feature_flags-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=feature_flags \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-feature_flags-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-feature_flags-logs-mixed-v3.7.28
        path: ct-feature_flags-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-feature_flags [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-feature_flags-logs-v3.8.9 && chmod 777 ct-feature_flags-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=feature_flags \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-feature_flags-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-feature_flags-logs-mixed-v3.8.9
        path: ct-feature_flags-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-lazy_queue:
    name: rabbit-ct-lazy_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-lazy_queue
      id: tests
      run: |
        mkdir ct-lazy_queue-logs && chmod 777 ct-lazy_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=lazy_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-lazy_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-lazy_queue-logs
        path: ct-lazy_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-lazy_queue [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-lazy_queue-logs-v3.7.28 && chmod 777 ct-lazy_queue-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=lazy_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-lazy_queue-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-lazy_queue-logs-mixed-v3.7.28
        path: ct-lazy_queue-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-lazy_queue [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-lazy_queue-logs-v3.8.9 && chmod 777 ct-lazy_queue-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=lazy_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-lazy_queue-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-lazy_queue-logs-mixed-v3.8.9
        path: ct-lazy_queue-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-list_consumers_sanity_check:
    name: rabbit-ct-list_consumers_sanity_check
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-list_consumers_sanity_check
      id: tests
      run: |
        mkdir ct-list_consumers_sanity_check-logs && chmod 777 ct-list_consumers_sanity_check-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_consumers_sanity_check \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-list_consumers_sanity_check-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-list_consumers_sanity_check-logs
        path: ct-list_consumers_sanity_check-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-list_consumers_sanity_check [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-list_consumers_sanity_check-logs-v3.7.28 && chmod 777 ct-list_consumers_sanity_check-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_consumers_sanity_check \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-list_consumers_sanity_check-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-list_consumers_sanity_check-logs-mixed-v3.7.28
        path: ct-list_consumers_sanity_check-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-list_consumers_sanity_check [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-list_consumers_sanity_check-logs-v3.8.9 && chmod 777 ct-list_consumers_sanity_check-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_consumers_sanity_check \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-list_consumers_sanity_check-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-list_consumers_sanity_check-logs-mixed-v3.8.9
        path: ct-list_consumers_sanity_check-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-list_queues_online_and_offline:
    name: rabbit-ct-list_queues_online_and_offline
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-list_queues_online_and_offline
      id: tests
      run: |
        mkdir ct-list_queues_online_and_offline-logs && chmod 777 ct-list_queues_online_and_offline-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_queues_online_and_offline \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-list_queues_online_and_offline-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-list_queues_online_and_offline-logs
        path: ct-list_queues_online_and_offline-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-list_queues_online_and_offline [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-list_queues_online_and_offline-logs-v3.7.28 && chmod 777 ct-list_queues_online_and_offline-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_queues_online_and_offline \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-list_queues_online_and_offline-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-list_queues_online_and_offline-logs-mixed-v3.7.28
        path: ct-list_queues_online_and_offline-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-list_queues_online_and_offline [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-list_queues_online_and_offline-logs-v3.8.9 && chmod 777 ct-list_queues_online_and_offline-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=list_queues_online_and_offline \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-list_queues_online_and_offline-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-list_queues_online_and_offline-logs-mixed-v3.8.9
        path: ct-list_queues_online_and_offline-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-maintenance_mode:
    name: rabbit-ct-maintenance_mode
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-maintenance_mode
      id: tests
      run: |
        mkdir ct-maintenance_mode-logs && chmod 777 ct-maintenance_mode-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=maintenance_mode \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-maintenance_mode-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-maintenance_mode-logs
        path: ct-maintenance_mode-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-maintenance_mode [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-maintenance_mode-logs-v3.7.28 && chmod 777 ct-maintenance_mode-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=maintenance_mode \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-maintenance_mode-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-maintenance_mode-logs-mixed-v3.7.28
        path: ct-maintenance_mode-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-maintenance_mode [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-maintenance_mode-logs-v3.8.9 && chmod 777 ct-maintenance_mode-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=maintenance_mode \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-maintenance_mode-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-maintenance_mode-logs-mixed-v3.8.9
        path: ct-maintenance_mode-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-many_node_ha:
    name: rabbit-ct-many_node_ha
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-many_node_ha
      id: tests
      run: |
        mkdir ct-many_node_ha-logs && chmod 777 ct-many_node_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=many_node_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-many_node_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-many_node_ha-logs
        path: ct-many_node_ha-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-many_node_ha [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-many_node_ha-logs-v3.7.28 && chmod 777 ct-many_node_ha-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=many_node_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-many_node_ha-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-many_node_ha-logs-mixed-v3.7.28
        path: ct-many_node_ha-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-many_node_ha [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-many_node_ha-logs-v3.8.9 && chmod 777 ct-many_node_ha-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=many_node_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-many_node_ha-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-many_node_ha-logs-mixed-v3.8.9
        path: ct-many_node_ha-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-message_size_limit:
    name: rabbit-ct-message_size_limit
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-message_size_limit
      id: tests
      run: |
        mkdir ct-message_size_limit-logs && chmod 777 ct-message_size_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=message_size_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-message_size_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-message_size_limit-logs
        path: ct-message_size_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-message_size_limit [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-message_size_limit-logs-v3.7.28 && chmod 777 ct-message_size_limit-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=message_size_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-message_size_limit-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-message_size_limit-logs-mixed-v3.7.28
        path: ct-message_size_limit-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-message_size_limit [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-message_size_limit-logs-v3.8.9 && chmod 777 ct-message_size_limit-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=message_size_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-message_size_limit-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-message_size_limit-logs-mixed-v3.8.9
        path: ct-message_size_limit-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-metrics:
    name: rabbit-ct-metrics
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-metrics
      id: tests
      run: |
        mkdir ct-metrics-logs && chmod 777 ct-metrics-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-metrics-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-metrics-logs
        path: ct-metrics-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-metrics [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-metrics-logs-v3.7.28 && chmod 777 ct-metrics-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-metrics-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-metrics-logs-mixed-v3.7.28
        path: ct-metrics-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-metrics [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-metrics-logs-v3.8.9 && chmod 777 ct-metrics-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-metrics-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-metrics-logs-mixed-v3.8.9
        path: ct-metrics-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-mirrored_supervisor:
    name: rabbit-ct-mirrored_supervisor
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-mirrored_supervisor
      id: tests
      run: |
        mkdir ct-mirrored_supervisor-logs && chmod 777 ct-mirrored_supervisor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=mirrored_supervisor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-mirrored_supervisor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-mirrored_supervisor-logs
        path: ct-mirrored_supervisor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-mirrored_supervisor [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-mirrored_supervisor-logs-v3.7.28 && chmod 777 ct-mirrored_supervisor-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=mirrored_supervisor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-mirrored_supervisor-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-mirrored_supervisor-logs-mixed-v3.7.28
        path: ct-mirrored_supervisor-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-mirrored_supervisor [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-mirrored_supervisor-logs-v3.8.9 && chmod 777 ct-mirrored_supervisor-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=mirrored_supervisor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-mirrored_supervisor-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-mirrored_supervisor-logs-mixed-v3.8.9
        path: ct-mirrored_supervisor-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-msg_store:
    name: rabbit-ct-msg_store
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-msg_store
      id: tests
      run: |
        mkdir ct-msg_store-logs && chmod 777 ct-msg_store-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-msg_store-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-msg_store-logs
        path: ct-msg_store-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-msg_store [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-msg_store-logs-v3.7.28 && chmod 777 ct-msg_store-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-msg_store-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-msg_store-logs-mixed-v3.7.28
        path: ct-msg_store-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-msg_store [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-msg_store-logs-v3.8.9 && chmod 777 ct-msg_store-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-msg_store-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-msg_store-logs-mixed-v3.8.9
        path: ct-msg_store-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-peer_discovery_classic_config:
    name: rabbit-ct-peer_discovery_classic_config
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-peer_discovery_classic_config
      id: tests
      run: |
        mkdir ct-peer_discovery_classic_config-logs && chmod 777 ct-peer_discovery_classic_config-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_classic_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-peer_discovery_classic_config-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_classic_config-logs
        path: ct-peer_discovery_classic_config-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_classic_config [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-peer_discovery_classic_config-logs-v3.7.28 && chmod 777 ct-peer_discovery_classic_config-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_classic_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-peer_discovery_classic_config-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_classic_config-logs-mixed-v3.7.28
        path: ct-peer_discovery_classic_config-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_classic_config [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-peer_discovery_classic_config-logs-v3.8.9 && chmod 777 ct-peer_discovery_classic_config-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_classic_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-peer_discovery_classic_config-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_classic_config-logs-mixed-v3.8.9
        path: ct-peer_discovery_classic_config-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-peer_discovery_dns:
    name: rabbit-ct-peer_discovery_dns
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-peer_discovery_dns
      id: tests
      run: |
        mkdir ct-peer_discovery_dns-logs && chmod 777 ct-peer_discovery_dns-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_dns \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-peer_discovery_dns-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_dns-logs
        path: ct-peer_discovery_dns-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_dns [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-peer_discovery_dns-logs-v3.7.28 && chmod 777 ct-peer_discovery_dns-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_dns \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-peer_discovery_dns-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_dns-logs-mixed-v3.7.28
        path: ct-peer_discovery_dns-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-peer_discovery_dns [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-peer_discovery_dns-logs-v3.8.9 && chmod 777 ct-peer_discovery_dns-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=peer_discovery_dns \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-peer_discovery_dns-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-peer_discovery_dns-logs-mixed-v3.8.9
        path: ct-peer_discovery_dns-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_user_connection_channel_limit:
    name: rabbit-ct-per_user_connection_channel_limit
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_user_connection_channel_limit
      id: tests
      run: |
        mkdir ct-per_user_connection_channel_limit-logs && chmod 777 ct-per_user_connection_channel_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_user_connection_channel_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit-logs
        path: ct-per_user_connection_channel_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_limit [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_user_connection_channel_limit-logs-v3.7.28 && chmod 777 ct-per_user_connection_channel_limit-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_user_connection_channel_limit-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit-logs-mixed-v3.7.28
        path: ct-per_user_connection_channel_limit-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_limit [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_user_connection_channel_limit-logs-v3.8.9 && chmod 777 ct-per_user_connection_channel_limit-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_user_connection_channel_limit-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit-logs-mixed-v3.8.9
        path: ct-per_user_connection_channel_limit-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_user_connection_channel_limit_partitions:
    name: rabbit-ct-per_user_connection_channel_limit_partitions
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_user_connection_channel_limit_partitions
      id: tests
      run: |
        mkdir ct-per_user_connection_channel_limit_partitions-logs && chmod 777 ct-per_user_connection_channel_limit_partitions-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_user_connection_channel_limit_partitions-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit_partitions-logs
        path: ct-per_user_connection_channel_limit_partitions-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_limit_partitions [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_user_connection_channel_limit_partitions-logs-v3.7.28 && chmod 777 ct-per_user_connection_channel_limit_partitions-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_user_connection_channel_limit_partitions-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit_partitions-logs-mixed-v3.7.28
        path: ct-per_user_connection_channel_limit_partitions-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_limit_partitions [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_user_connection_channel_limit_partitions-logs-v3.8.9 && chmod 777 ct-per_user_connection_channel_limit_partitions-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_user_connection_channel_limit_partitions-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_limit_partitions-logs-mixed-v3.8.9
        path: ct-per_user_connection_channel_limit_partitions-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_user_connection_channel_tracking:
    name: rabbit-ct-per_user_connection_channel_tracking
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_user_connection_channel_tracking
      id: tests
      run: |
        mkdir ct-per_user_connection_channel_tracking-logs && chmod 777 ct-per_user_connection_channel_tracking-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_user_connection_channel_tracking-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_tracking-logs
        path: ct-per_user_connection_channel_tracking-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_tracking [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_user_connection_channel_tracking-logs-v3.7.28 && chmod 777 ct-per_user_connection_channel_tracking-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_user_connection_channel_tracking-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_tracking-logs-mixed-v3.7.28
        path: ct-per_user_connection_channel_tracking-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_channel_tracking [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_user_connection_channel_tracking-logs-v3.8.9 && chmod 777 ct-per_user_connection_channel_tracking-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_channel_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_user_connection_channel_tracking-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_channel_tracking-logs-mixed-v3.8.9
        path: ct-per_user_connection_channel_tracking-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_user_connection_tracking:
    name: rabbit-ct-per_user_connection_tracking
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_user_connection_tracking
      id: tests
      run: |
        mkdir ct-per_user_connection_tracking-logs && chmod 777 ct-per_user_connection_tracking-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_user_connection_tracking-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_tracking-logs
        path: ct-per_user_connection_tracking-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_tracking [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_user_connection_tracking-logs-v3.7.28 && chmod 777 ct-per_user_connection_tracking-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_user_connection_tracking-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_tracking-logs-mixed-v3.7.28
        path: ct-per_user_connection_tracking-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_user_connection_tracking [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_user_connection_tracking-logs-v3.8.9 && chmod 777 ct-per_user_connection_tracking-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_user_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_user_connection_tracking-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_user_connection_tracking-logs-mixed-v3.8.9
        path: ct-per_user_connection_tracking-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_vhost_connection_limit:
    name: rabbit-ct-per_vhost_connection_limit
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_vhost_connection_limit
      id: tests
      run: |
        mkdir ct-per_vhost_connection_limit-logs && chmod 777 ct-per_vhost_connection_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_connection_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit-logs
        path: ct-per_vhost_connection_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_vhost_connection_limit-logs-v3.7.28 && chmod 777 ct-per_vhost_connection_limit-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_vhost_connection_limit-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit-logs-mixed-v3.7.28
        path: ct-per_vhost_connection_limit-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_vhost_connection_limit-logs-v3.8.9 && chmod 777 ct-per_vhost_connection_limit-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_vhost_connection_limit-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit-logs-mixed-v3.8.9
        path: ct-per_vhost_connection_limit-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_vhost_connection_limit_partitions:
    name: rabbit-ct-per_vhost_connection_limit_partitions
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_vhost_connection_limit_partitions
      id: tests
      run: |
        mkdir ct-per_vhost_connection_limit_partitions-logs && chmod 777 ct-per_vhost_connection_limit_partitions-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_connection_limit_partitions-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit_partitions-logs
        path: ct-per_vhost_connection_limit_partitions-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit_partitions [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_vhost_connection_limit_partitions-logs-v3.7.28 && chmod 777 ct-per_vhost_connection_limit_partitions-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_vhost_connection_limit_partitions-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit_partitions-logs-mixed-v3.7.28
        path: ct-per_vhost_connection_limit_partitions-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_connection_limit_partitions [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_vhost_connection_limit_partitions-logs-v3.8.9 && chmod 777 ct-per_vhost_connection_limit_partitions-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_connection_limit_partitions \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_vhost_connection_limit_partitions-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_connection_limit_partitions-logs-mixed-v3.8.9
        path: ct-per_vhost_connection_limit_partitions-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_vhost_msg_store:
    name: rabbit-ct-per_vhost_msg_store
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_vhost_msg_store
      id: tests
      run: |
        mkdir ct-per_vhost_msg_store-logs && chmod 777 ct-per_vhost_msg_store-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_msg_store-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_msg_store-logs
        path: ct-per_vhost_msg_store-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_msg_store [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_vhost_msg_store-logs-v3.7.28 && chmod 777 ct-per_vhost_msg_store-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_vhost_msg_store-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_msg_store-logs-mixed-v3.7.28
        path: ct-per_vhost_msg_store-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_msg_store [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_vhost_msg_store-logs-v3.8.9 && chmod 777 ct-per_vhost_msg_store-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_msg_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_vhost_msg_store-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_msg_store-logs-mixed-v3.8.9
        path: ct-per_vhost_msg_store-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-per_vhost_queue_limit:
    name: rabbit-ct-per_vhost_queue_limit
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-per_vhost_queue_limit
      id: tests
      run: |
        mkdir ct-per_vhost_queue_limit-logs && chmod 777 ct-per_vhost_queue_limit-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_queue_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-per_vhost_queue_limit-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_queue_limit-logs
        path: ct-per_vhost_queue_limit-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_queue_limit [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-per_vhost_queue_limit-logs-v3.7.28 && chmod 777 ct-per_vhost_queue_limit-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_queue_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-per_vhost_queue_limit-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_queue_limit-logs-mixed-v3.7.28
        path: ct-per_vhost_queue_limit-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-per_vhost_queue_limit [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-per_vhost_queue_limit-logs-v3.8.9 && chmod 777 ct-per_vhost_queue_limit-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=per_vhost_queue_limit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-per_vhost_queue_limit-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-per_vhost_queue_limit-logs-mixed-v3.8.9
        path: ct-per_vhost_queue_limit-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-policy:
    name: rabbit-ct-policy
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-policy
      id: tests
      run: |
        mkdir ct-policy-logs && chmod 777 ct-policy-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-policy-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-policy-logs
        path: ct-policy-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-policy [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-policy-logs-v3.7.28 && chmod 777 ct-policy-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-policy-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-policy-logs-mixed-v3.7.28
        path: ct-policy-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-policy [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-policy-logs-v3.8.9 && chmod 777 ct-policy-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-policy-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-policy-logs-mixed-v3.8.9
        path: ct-policy-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-priority_queue:
    name: rabbit-ct-priority_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-priority_queue
      id: tests
      run: |
        mkdir ct-priority_queue-logs && chmod 777 ct-priority_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-priority_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue-logs
        path: ct-priority_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-priority_queue [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-priority_queue-logs-v3.7.28 && chmod 777 ct-priority_queue-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-priority_queue-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue-logs-mixed-v3.7.28
        path: ct-priority_queue-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-priority_queue [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-priority_queue-logs-v3.8.9 && chmod 777 ct-priority_queue-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-priority_queue-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue-logs-mixed-v3.8.9
        path: ct-priority_queue-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-priority_queue_recovery:
    name: rabbit-ct-priority_queue_recovery
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-priority_queue_recovery
      id: tests
      run: |
        mkdir ct-priority_queue_recovery-logs && chmod 777 ct-priority_queue_recovery-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue_recovery \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-priority_queue_recovery-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue_recovery-logs
        path: ct-priority_queue_recovery-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-priority_queue_recovery [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-priority_queue_recovery-logs-v3.7.28 && chmod 777 ct-priority_queue_recovery-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue_recovery \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-priority_queue_recovery-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue_recovery-logs-mixed-v3.7.28
        path: ct-priority_queue_recovery-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-priority_queue_recovery [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-priority_queue_recovery-logs-v3.8.9 && chmod 777 ct-priority_queue_recovery-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=priority_queue_recovery \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-priority_queue_recovery-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-priority_queue_recovery-logs-mixed-v3.8.9
        path: ct-priority_queue_recovery-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-product_info:
    name: rabbit-ct-product_info
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-product_info
      id: tests
      run: |
        mkdir ct-product_info-logs && chmod 777 ct-product_info-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=product_info \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-product_info-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-product_info-logs
        path: ct-product_info-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-product_info [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-product_info-logs-v3.7.28 && chmod 777 ct-product_info-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=product_info \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-product_info-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-product_info-logs-mixed-v3.7.28
        path: ct-product_info-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-product_info [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-product_info-logs-v3.8.9 && chmod 777 ct-product_info-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=product_info \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-product_info-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-product_info-logs-mixed-v3.8.9
        path: ct-product_info-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-proxy_protocol:
    name: rabbit-ct-proxy_protocol
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-proxy_protocol
      id: tests
      run: |
        mkdir ct-proxy_protocol-logs && chmod 777 ct-proxy_protocol-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=proxy_protocol \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-proxy_protocol-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-proxy_protocol-logs
        path: ct-proxy_protocol-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-proxy_protocol [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-proxy_protocol-logs-v3.7.28 && chmod 777 ct-proxy_protocol-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=proxy_protocol \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-proxy_protocol-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-proxy_protocol-logs-mixed-v3.7.28
        path: ct-proxy_protocol-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-proxy_protocol [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-proxy_protocol-logs-v3.8.9 && chmod 777 ct-proxy_protocol-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=proxy_protocol \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-proxy_protocol-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-proxy_protocol-logs-mixed-v3.8.9
        path: ct-proxy_protocol-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-publisher_confirms_parallel:
    name: rabbit-ct-publisher_confirms_parallel
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-publisher_confirms_parallel
      id: tests
      run: |
        mkdir ct-publisher_confirms_parallel-logs && chmod 777 ct-publisher_confirms_parallel-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=publisher_confirms_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-publisher_confirms_parallel-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-publisher_confirms_parallel-logs
        path: ct-publisher_confirms_parallel-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-publisher_confirms_parallel [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-publisher_confirms_parallel-logs-v3.7.28 && chmod 777 ct-publisher_confirms_parallel-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=publisher_confirms_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-publisher_confirms_parallel-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-publisher_confirms_parallel-logs-mixed-v3.7.28
        path: ct-publisher_confirms_parallel-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-publisher_confirms_parallel [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-publisher_confirms_parallel-logs-v3.8.9 && chmod 777 ct-publisher_confirms_parallel-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=publisher_confirms_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-publisher_confirms_parallel-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-publisher_confirms_parallel-logs-mixed-v3.8.9
        path: ct-publisher_confirms_parallel-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-queue_length_limits:
    name: rabbit-ct-queue_length_limits
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-queue_length_limits
      id: tests
      run: |
        mkdir ct-queue_length_limits-logs && chmod 777 ct-queue_length_limits-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_length_limits \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_length_limits-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-queue_length_limits-logs
        path: ct-queue_length_limits-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_length_limits [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-queue_length_limits-logs-v3.7.28 && chmod 777 ct-queue_length_limits-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_length_limits \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-queue_length_limits-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-queue_length_limits-logs-mixed-v3.7.28
        path: ct-queue_length_limits-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_length_limits [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-queue_length_limits-logs-v3.8.9 && chmod 777 ct-queue_length_limits-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_length_limits \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-queue_length_limits-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-queue_length_limits-logs-mixed-v3.8.9
        path: ct-queue_length_limits-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-queue_master_location:
    name: rabbit-ct-queue_master_location
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-queue_master_location
      id: tests
      run: |
        mkdir ct-queue_master_location-logs && chmod 777 ct-queue_master_location-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_master_location \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_master_location-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-queue_master_location-logs
        path: ct-queue_master_location-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_master_location [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-queue_master_location-logs-v3.7.28 && chmod 777 ct-queue_master_location-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_master_location \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-queue_master_location-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-queue_master_location-logs-mixed-v3.7.28
        path: ct-queue_master_location-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_master_location [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-queue_master_location-logs-v3.8.9 && chmod 777 ct-queue_master_location-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_master_location \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-queue_master_location-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-queue_master_location-logs-mixed-v3.8.9
        path: ct-queue_master_location-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-queue_parallel:
    name: rabbit-ct-queue_parallel
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-queue_parallel
      id: tests
      run: |
        mkdir ct-queue_parallel-logs && chmod 777 ct-queue_parallel-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-queue_parallel-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-queue_parallel-logs
        path: ct-queue_parallel-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_parallel [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-queue_parallel-logs-v3.7.28 && chmod 777 ct-queue_parallel-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-queue_parallel-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-queue_parallel-logs-mixed-v3.7.28
        path: ct-queue_parallel-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-queue_parallel [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-queue_parallel-logs-v3.8.9 && chmod 777 ct-queue_parallel-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=queue_parallel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-queue_parallel-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-queue_parallel-logs-mixed-v3.8.9
        path: ct-queue_parallel-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-quorum_queue:
    name: rabbit-ct-quorum_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-quorum_queue
      id: tests
      run: |
        mkdir ct-quorum_queue-logs && chmod 777 ct-quorum_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=quorum_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-quorum_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-quorum_queue-logs
        path: ct-quorum_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-quorum_queue [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-quorum_queue-logs-v3.7.28 && chmod 777 ct-quorum_queue-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=quorum_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-quorum_queue-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-quorum_queue-logs-mixed-v3.7.28
        path: ct-quorum_queue-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-quorum_queue [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-quorum_queue-logs-v3.8.9 && chmod 777 ct-quorum_queue-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=quorum_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-quorum_queue-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-quorum_queue-logs-mixed-v3.8.9
        path: ct-quorum_queue-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_core_metrics_gc:
    name: rabbit-ct-rabbit_core_metrics_gc
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbit_core_metrics_gc
      id: tests
      run: |
        mkdir ct-rabbit_core_metrics_gc-logs && chmod 777 ct-rabbit_core_metrics_gc-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_core_metrics_gc \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_core_metrics_gc-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_core_metrics_gc-logs
        path: ct-rabbit_core_metrics_gc-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_core_metrics_gc [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbit_core_metrics_gc-logs-v3.7.28 && chmod 777 ct-rabbit_core_metrics_gc-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_core_metrics_gc \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbit_core_metrics_gc-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_core_metrics_gc-logs-mixed-v3.7.28
        path: ct-rabbit_core_metrics_gc-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_core_metrics_gc [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbit_core_metrics_gc-logs-v3.8.9 && chmod 777 ct-rabbit_core_metrics_gc-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_core_metrics_gc \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbit_core_metrics_gc-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_core_metrics_gc-logs-mixed-v3.8.9
        path: ct-rabbit_core_metrics_gc-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_fifo:
    name: rabbit-ct-rabbit_fifo
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbit_fifo
      id: tests
      run: |
        mkdir ct-rabbit_fifo-logs && chmod 777 ct-rabbit_fifo-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo-logs
        path: ct-rabbit_fifo-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbit_fifo-logs-v3.7.28 && chmod 777 ct-rabbit_fifo-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbit_fifo-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo-logs-mixed-v3.7.28
        path: ct-rabbit_fifo-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbit_fifo-logs-v3.8.9 && chmod 777 ct-rabbit_fifo-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbit_fifo-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo-logs-mixed-v3.8.9
        path: ct-rabbit_fifo-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_fifo_int:
    name: rabbit-ct-rabbit_fifo_int
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbit_fifo_int
      id: tests
      run: |
        mkdir ct-rabbit_fifo_int-logs && chmod 777 ct-rabbit_fifo_int-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_int \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo_int-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_int-logs
        path: ct-rabbit_fifo_int-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_int [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbit_fifo_int-logs-v3.7.28 && chmod 777 ct-rabbit_fifo_int-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_int \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbit_fifo_int-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_int-logs-mixed-v3.7.28
        path: ct-rabbit_fifo_int-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_int [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbit_fifo_int-logs-v3.8.9 && chmod 777 ct-rabbit_fifo_int-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_int \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbit_fifo_int-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_int-logs-mixed-v3.8.9
        path: ct-rabbit_fifo_int-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_fifo_prop:
    name: rabbit-ct-rabbit_fifo_prop
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbit_fifo_prop
      id: tests
      run: |
        mkdir ct-rabbit_fifo_prop-logs && chmod 777 ct-rabbit_fifo_prop-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo_prop-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_prop-logs
        path: ct-rabbit_fifo_prop-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_prop [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbit_fifo_prop-logs-v3.7.28 && chmod 777 ct-rabbit_fifo_prop-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbit_fifo_prop-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_prop-logs-mixed-v3.7.28
        path: ct-rabbit_fifo_prop-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_prop [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbit_fifo_prop-logs-v3.8.9 && chmod 777 ct-rabbit_fifo_prop-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbit_fifo_prop-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_prop-logs-mixed-v3.8.9
        path: ct-rabbit_fifo_prop-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbit_fifo_v0:
    name: rabbit-ct-rabbit_fifo_v0
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbit_fifo_v0
      id: tests
      run: |
        mkdir ct-rabbit_fifo_v0-logs && chmod 777 ct-rabbit_fifo_v0-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_v0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbit_fifo_v0-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_v0-logs
        path: ct-rabbit_fifo_v0-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_v0 [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbit_fifo_v0-logs-v3.7.28 && chmod 777 ct-rabbit_fifo_v0-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_v0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbit_fifo_v0-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_v0-logs-mixed-v3.7.28
        path: ct-rabbit_fifo_v0-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbit_fifo_v0 [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbit_fifo_v0-logs-v3.8.9 && chmod 777 ct-rabbit_fifo_v0-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbit_fifo_v0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbit_fifo_v0-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbit_fifo_v0-logs-mixed-v3.8.9
        path: ct-rabbit_fifo_v0-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbitmq_queues_cli_integration:
    name: rabbit-ct-rabbitmq_queues_cli_integration
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbitmq_queues_cli_integration
      id: tests
      run: |
        mkdir ct-rabbitmq_queues_cli_integration-logs && chmod 777 ct-rabbitmq_queues_cli_integration-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmq_queues_cli_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmq_queues_cli_integration-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmq_queues_cli_integration-logs
        path: ct-rabbitmq_queues_cli_integration-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmq_queues_cli_integration [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbitmq_queues_cli_integration-logs-v3.7.28 && chmod 777 ct-rabbitmq_queues_cli_integration-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmq_queues_cli_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbitmq_queues_cli_integration-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmq_queues_cli_integration-logs-mixed-v3.7.28
        path: ct-rabbitmq_queues_cli_integration-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmq_queues_cli_integration [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbitmq_queues_cli_integration-logs-v3.8.9 && chmod 777 ct-rabbitmq_queues_cli_integration-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmq_queues_cli_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbitmq_queues_cli_integration-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmq_queues_cli_integration-logs-mixed-v3.8.9
        path: ct-rabbitmq_queues_cli_integration-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbitmqctl_integration:
    name: rabbit-ct-rabbitmqctl_integration
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbitmqctl_integration
      id: tests
      run: |
        mkdir ct-rabbitmqctl_integration-logs && chmod 777 ct-rabbitmqctl_integration-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmqctl_integration-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_integration-logs
        path: ct-rabbitmqctl_integration-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_integration [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbitmqctl_integration-logs-v3.7.28 && chmod 777 ct-rabbitmqctl_integration-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbitmqctl_integration-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_integration-logs-mixed-v3.7.28
        path: ct-rabbitmqctl_integration-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_integration [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbitmqctl_integration-logs-v3.8.9 && chmod 777 ct-rabbitmqctl_integration-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_integration \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbitmqctl_integration-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_integration-logs-mixed-v3.8.9
        path: ct-rabbitmqctl_integration-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-rabbitmqctl_shutdown:
    name: rabbit-ct-rabbitmqctl_shutdown
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-rabbitmqctl_shutdown
      id: tests
      run: |
        mkdir ct-rabbitmqctl_shutdown-logs && chmod 777 ct-rabbitmqctl_shutdown-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_shutdown \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-rabbitmqctl_shutdown-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_shutdown-logs
        path: ct-rabbitmqctl_shutdown-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_shutdown [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-rabbitmqctl_shutdown-logs-v3.7.28 && chmod 777 ct-rabbitmqctl_shutdown-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_shutdown \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-rabbitmqctl_shutdown-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_shutdown-logs-mixed-v3.7.28
        path: ct-rabbitmqctl_shutdown-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-rabbitmqctl_shutdown [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-rabbitmqctl_shutdown-logs-v3.8.9 && chmod 777 ct-rabbitmqctl_shutdown-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=rabbitmqctl_shutdown \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-rabbitmqctl_shutdown-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-rabbitmqctl_shutdown-logs-mixed-v3.8.9
        path: ct-rabbitmqctl_shutdown-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-signal_handling:
    name: rabbit-ct-signal_handling
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-signal_handling
      id: tests
      run: |
        mkdir ct-signal_handling-logs && chmod 777 ct-signal_handling-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=signal_handling \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-signal_handling-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-signal_handling-logs
        path: ct-signal_handling-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-signal_handling [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-signal_handling-logs-v3.7.28 && chmod 777 ct-signal_handling-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=signal_handling \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-signal_handling-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-signal_handling-logs-mixed-v3.7.28
        path: ct-signal_handling-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-signal_handling [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-signal_handling-logs-v3.8.9 && chmod 777 ct-signal_handling-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=signal_handling \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-signal_handling-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-signal_handling-logs-mixed-v3.8.9
        path: ct-signal_handling-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-simple_ha:
    name: rabbit-ct-simple_ha
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-simple_ha
      id: tests
      run: |
        mkdir ct-simple_ha-logs && chmod 777 ct-simple_ha-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=simple_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-simple_ha-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-simple_ha-logs
        path: ct-simple_ha-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-simple_ha [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-simple_ha-logs-v3.7.28 && chmod 777 ct-simple_ha-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=simple_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-simple_ha-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-simple_ha-logs-mixed-v3.7.28
        path: ct-simple_ha-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-simple_ha [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-simple_ha-logs-v3.8.9 && chmod 777 ct-simple_ha-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=simple_ha \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-simple_ha-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-simple_ha-logs-mixed-v3.8.9
        path: ct-simple_ha-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-single_active_consumer:
    name: rabbit-ct-single_active_consumer
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-single_active_consumer
      id: tests
      run: |
        mkdir ct-single_active_consumer-logs && chmod 777 ct-single_active_consumer-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=single_active_consumer \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-single_active_consumer-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-single_active_consumer-logs
        path: ct-single_active_consumer-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-single_active_consumer [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-single_active_consumer-logs-v3.7.28 && chmod 777 ct-single_active_consumer-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=single_active_consumer \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-single_active_consumer-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-single_active_consumer-logs-mixed-v3.7.28
        path: ct-single_active_consumer-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-single_active_consumer [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-single_active_consumer-logs-v3.8.9 && chmod 777 ct-single_active_consumer-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=single_active_consumer \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-single_active_consumer-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-single_active_consumer-logs-mixed-v3.8.9
        path: ct-single_active_consumer-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-sup_delayed_restart:
    name: rabbit-ct-sup_delayed_restart
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-sup_delayed_restart
      id: tests
      run: |
        mkdir ct-sup_delayed_restart-logs && chmod 777 ct-sup_delayed_restart-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sup_delayed_restart \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-sup_delayed_restart-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-sup_delayed_restart-logs
        path: ct-sup_delayed_restart-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-sup_delayed_restart [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-sup_delayed_restart-logs-v3.7.28 && chmod 777 ct-sup_delayed_restart-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sup_delayed_restart \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-sup_delayed_restart-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-sup_delayed_restart-logs-mixed-v3.7.28
        path: ct-sup_delayed_restart-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-sup_delayed_restart [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-sup_delayed_restart-logs-v3.8.9 && chmod 777 ct-sup_delayed_restart-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sup_delayed_restart \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-sup_delayed_restart-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-sup_delayed_restart-logs-mixed-v3.8.9
        path: ct-sup_delayed_restart-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-sync_detection:
    name: rabbit-ct-sync_detection
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-sync_detection
      id: tests
      run: |
        mkdir ct-sync_detection-logs && chmod 777 ct-sync_detection-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sync_detection \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-sync_detection-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-sync_detection-logs
        path: ct-sync_detection-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-sync_detection [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-sync_detection-logs-v3.7.28 && chmod 777 ct-sync_detection-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sync_detection \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-sync_detection-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-sync_detection-logs-mixed-v3.7.28
        path: ct-sync_detection-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-sync_detection [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-sync_detection-logs-v3.8.9 && chmod 777 ct-sync_detection-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=sync_detection \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-sync_detection-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-sync_detection-logs-mixed-v3.8.9
        path: ct-sync_detection-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-term_to_binary_compat_prop:
    name: rabbit-ct-term_to_binary_compat_prop
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-term_to_binary_compat_prop
      id: tests
      run: |
        mkdir ct-term_to_binary_compat_prop-logs && chmod 777 ct-term_to_binary_compat_prop-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=term_to_binary_compat_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-term_to_binary_compat_prop-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-term_to_binary_compat_prop-logs
        path: ct-term_to_binary_compat_prop-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-term_to_binary_compat_prop [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-term_to_binary_compat_prop-logs-v3.7.28 && chmod 777 ct-term_to_binary_compat_prop-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=term_to_binary_compat_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-term_to_binary_compat_prop-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-term_to_binary_compat_prop-logs-mixed-v3.7.28
        path: ct-term_to_binary_compat_prop-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-term_to_binary_compat_prop [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-term_to_binary_compat_prop-logs-v3.8.9 && chmod 777 ct-term_to_binary_compat_prop-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=term_to_binary_compat_prop \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-term_to_binary_compat_prop-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-term_to_binary_compat_prop-logs-mixed-v3.8.9
        path: ct-term_to_binary_compat_prop-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-topic_permission:
    name: rabbit-ct-topic_permission
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-topic_permission
      id: tests
      run: |
        mkdir ct-topic_permission-logs && chmod 777 ct-topic_permission-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=topic_permission \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-topic_permission-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-topic_permission-logs
        path: ct-topic_permission-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-topic_permission [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-topic_permission-logs-v3.7.28 && chmod 777 ct-topic_permission-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=topic_permission \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-topic_permission-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-topic_permission-logs-mixed-v3.7.28
        path: ct-topic_permission-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-topic_permission [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-topic_permission-logs-v3.8.9 && chmod 777 ct-topic_permission-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=topic_permission \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-topic_permission-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-topic_permission-logs-mixed-v3.8.9
        path: ct-topic_permission-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_access_control:
    name: rabbit-ct-unit_access_control
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_access_control
      id: tests
      run: |
        mkdir ct-unit_access_control-logs && chmod 777 ct-unit_access_control-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control-logs
        path: ct-unit_access_control-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_access_control-logs-v3.7.28 && chmod 777 ct-unit_access_control-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_access_control-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control-logs-mixed-v3.7.28
        path: ct-unit_access_control-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_access_control-logs-v3.8.9 && chmod 777 ct-unit_access_control-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_access_control-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control-logs-mixed-v3.8.9
        path: ct-unit_access_control-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_access_control_authn_authz_context_propagation:
    name: rabbit-ct-unit_access_control_authn_authz_context_propagation
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_access_control_authn_authz_context_propagation
      id: tests
      run: |
        mkdir ct-unit_access_control_authn_authz_context_propagation-logs && chmod 777 ct-unit_access_control_authn_authz_context_propagation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_authn_authz_context_propagation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control_authn_authz_context_propagation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_authn_authz_context_propagation-logs
        path: ct-unit_access_control_authn_authz_context_propagation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_authn_authz_context_propagation [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_access_control_authn_authz_context_propagation-logs-v3.7.28 && chmod 777 ct-unit_access_control_authn_authz_context_propagation-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_authn_authz_context_propagation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_access_control_authn_authz_context_propagation-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_authn_authz_context_propagation-logs-mixed-v3.7.28
        path: ct-unit_access_control_authn_authz_context_propagation-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_authn_authz_context_propagation [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_access_control_authn_authz_context_propagation-logs-v3.8.9 && chmod 777 ct-unit_access_control_authn_authz_context_propagation-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_authn_authz_context_propagation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_access_control_authn_authz_context_propagation-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_authn_authz_context_propagation-logs-mixed-v3.8.9
        path: ct-unit_access_control_authn_authz_context_propagation-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_access_control_credential_validation:
    name: rabbit-ct-unit_access_control_credential_validation
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_access_control_credential_validation
      id: tests
      run: |
        mkdir ct-unit_access_control_credential_validation-logs && chmod 777 ct-unit_access_control_credential_validation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_credential_validation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_access_control_credential_validation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_credential_validation-logs
        path: ct-unit_access_control_credential_validation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_credential_validation [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_access_control_credential_validation-logs-v3.7.28 && chmod 777 ct-unit_access_control_credential_validation-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_credential_validation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_access_control_credential_validation-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_credential_validation-logs-mixed-v3.7.28
        path: ct-unit_access_control_credential_validation-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_access_control_credential_validation [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_access_control_credential_validation-logs-v3.8.9 && chmod 777 ct-unit_access_control_credential_validation-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_access_control_credential_validation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_access_control_credential_validation-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_access_control_credential_validation-logs-mixed-v3.8.9
        path: ct-unit_access_control_credential_validation-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_amqp091_content_framing:
    name: rabbit-ct-unit_amqp091_content_framing
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_amqp091_content_framing
      id: tests
      run: |
        mkdir ct-unit_amqp091_content_framing-logs && chmod 777 ct-unit_amqp091_content_framing-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_content_framing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_amqp091_content_framing-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_content_framing-logs
        path: ct-unit_amqp091_content_framing-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_content_framing [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_amqp091_content_framing-logs-v3.7.28 && chmod 777 ct-unit_amqp091_content_framing-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_content_framing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_amqp091_content_framing-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_content_framing-logs-mixed-v3.7.28
        path: ct-unit_amqp091_content_framing-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_content_framing [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_amqp091_content_framing-logs-v3.8.9 && chmod 777 ct-unit_amqp091_content_framing-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_content_framing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_amqp091_content_framing-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_content_framing-logs-mixed-v3.8.9
        path: ct-unit_amqp091_content_framing-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_amqp091_server_properties:
    name: rabbit-ct-unit_amqp091_server_properties
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_amqp091_server_properties
      id: tests
      run: |
        mkdir ct-unit_amqp091_server_properties-logs && chmod 777 ct-unit_amqp091_server_properties-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_server_properties \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_amqp091_server_properties-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_server_properties-logs
        path: ct-unit_amqp091_server_properties-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_server_properties [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_amqp091_server_properties-logs-v3.7.28 && chmod 777 ct-unit_amqp091_server_properties-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_server_properties \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_amqp091_server_properties-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_server_properties-logs-mixed-v3.7.28
        path: ct-unit_amqp091_server_properties-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_amqp091_server_properties [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_amqp091_server_properties-logs-v3.8.9 && chmod 777 ct-unit_amqp091_server_properties-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_amqp091_server_properties \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_amqp091_server_properties-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_amqp091_server_properties-logs-mixed-v3.8.9
        path: ct-unit_amqp091_server_properties-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_app_management:
    name: rabbit-ct-unit_app_management
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_app_management
      id: tests
      run: |
        mkdir ct-unit_app_management-logs && chmod 777 ct-unit_app_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_app_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_app_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_app_management-logs
        path: ct-unit_app_management-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_app_management [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_app_management-logs-v3.7.28 && chmod 777 ct-unit_app_management-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_app_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_app_management-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_app_management-logs-mixed-v3.7.28
        path: ct-unit_app_management-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_app_management [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_app_management-logs-v3.8.9 && chmod 777 ct-unit_app_management-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_app_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_app_management-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_app_management-logs-mixed-v3.8.9
        path: ct-unit_app_management-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_cluster_formation_locking_mocks:
    name: rabbit-ct-unit_cluster_formation_locking_mocks
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_cluster_formation_locking_mocks
      id: tests
      run: |
        mkdir ct-unit_cluster_formation_locking_mocks-logs && chmod 777 ct-unit_cluster_formation_locking_mocks-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_cluster_formation_locking_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_cluster_formation_locking_mocks-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_cluster_formation_locking_mocks-logs
        path: ct-unit_cluster_formation_locking_mocks-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_cluster_formation_locking_mocks [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_cluster_formation_locking_mocks-logs-v3.7.28 && chmod 777 ct-unit_cluster_formation_locking_mocks-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_cluster_formation_locking_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_cluster_formation_locking_mocks-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_cluster_formation_locking_mocks-logs-mixed-v3.7.28
        path: ct-unit_cluster_formation_locking_mocks-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_cluster_formation_locking_mocks [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_cluster_formation_locking_mocks-logs-v3.8.9 && chmod 777 ct-unit_cluster_formation_locking_mocks-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_cluster_formation_locking_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_cluster_formation_locking_mocks-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_cluster_formation_locking_mocks-logs-mixed-v3.8.9
        path: ct-unit_cluster_formation_locking_mocks-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_collections:
    name: rabbit-ct-unit_collections
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_collections
      id: tests
      run: |
        mkdir ct-unit_collections-logs && chmod 777 ct-unit_collections-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_collections \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_collections-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_collections-logs
        path: ct-unit_collections-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_collections [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_collections-logs-v3.7.28 && chmod 777 ct-unit_collections-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_collections \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_collections-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_collections-logs-mixed-v3.7.28
        path: ct-unit_collections-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_collections [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_collections-logs-v3.8.9 && chmod 777 ct-unit_collections-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_collections \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_collections-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_collections-logs-mixed-v3.8.9
        path: ct-unit_collections-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_config_value_encryption:
    name: rabbit-ct-unit_config_value_encryption
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_config_value_encryption
      id: tests
      run: |
        mkdir ct-unit_config_value_encryption-logs && chmod 777 ct-unit_config_value_encryption-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_config_value_encryption \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_config_value_encryption-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_config_value_encryption-logs
        path: ct-unit_config_value_encryption-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_config_value_encryption [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_config_value_encryption-logs-v3.7.28 && chmod 777 ct-unit_config_value_encryption-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_config_value_encryption \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_config_value_encryption-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_config_value_encryption-logs-mixed-v3.7.28
        path: ct-unit_config_value_encryption-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_config_value_encryption [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_config_value_encryption-logs-v3.8.9 && chmod 777 ct-unit_config_value_encryption-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_config_value_encryption \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_config_value_encryption-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_config_value_encryption-logs-mixed-v3.8.9
        path: ct-unit_config_value_encryption-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_connection_tracking:
    name: rabbit-ct-unit_connection_tracking
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_connection_tracking
      id: tests
      run: |
        mkdir ct-unit_connection_tracking-logs && chmod 777 ct-unit_connection_tracking-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_connection_tracking-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_connection_tracking-logs
        path: ct-unit_connection_tracking-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_connection_tracking [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_connection_tracking-logs-v3.7.28 && chmod 777 ct-unit_connection_tracking-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_connection_tracking-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_connection_tracking-logs-mixed-v3.7.28
        path: ct-unit_connection_tracking-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_connection_tracking [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_connection_tracking-logs-v3.8.9 && chmod 777 ct-unit_connection_tracking-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_connection_tracking \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_connection_tracking-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_connection_tracking-logs-mixed-v3.8.9
        path: ct-unit_connection_tracking-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_credit_flow:
    name: rabbit-ct-unit_credit_flow
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_credit_flow
      id: tests
      run: |
        mkdir ct-unit_credit_flow-logs && chmod 777 ct-unit_credit_flow-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_credit_flow \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_credit_flow-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_credit_flow-logs
        path: ct-unit_credit_flow-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_credit_flow [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_credit_flow-logs-v3.7.28 && chmod 777 ct-unit_credit_flow-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_credit_flow \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_credit_flow-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_credit_flow-logs-mixed-v3.7.28
        path: ct-unit_credit_flow-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_credit_flow [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_credit_flow-logs-v3.8.9 && chmod 777 ct-unit_credit_flow-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_credit_flow \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_credit_flow-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_credit_flow-logs-mixed-v3.8.9
        path: ct-unit_credit_flow-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_disk_monitor:
    name: rabbit-ct-unit_disk_monitor
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_disk_monitor
      id: tests
      run: |
        mkdir ct-unit_disk_monitor-logs && chmod 777 ct-unit_disk_monitor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_disk_monitor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor-logs
        path: ct-unit_disk_monitor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_disk_monitor-logs-v3.7.28 && chmod 777 ct-unit_disk_monitor-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_disk_monitor-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor-logs-mixed-v3.7.28
        path: ct-unit_disk_monitor-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_disk_monitor-logs-v3.8.9 && chmod 777 ct-unit_disk_monitor-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_disk_monitor-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor-logs-mixed-v3.8.9
        path: ct-unit_disk_monitor-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_disk_monitor_mocks:
    name: rabbit-ct-unit_disk_monitor_mocks
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_disk_monitor_mocks
      id: tests
      run: |
        mkdir ct-unit_disk_monitor_mocks-logs && chmod 777 ct-unit_disk_monitor_mocks-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_disk_monitor_mocks-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor_mocks-logs
        path: ct-unit_disk_monitor_mocks-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor_mocks [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_disk_monitor_mocks-logs-v3.7.28 && chmod 777 ct-unit_disk_monitor_mocks-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_disk_monitor_mocks-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor_mocks-logs-mixed-v3.7.28
        path: ct-unit_disk_monitor_mocks-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_disk_monitor_mocks [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_disk_monitor_mocks-logs-v3.8.9 && chmod 777 ct-unit_disk_monitor_mocks-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_disk_monitor_mocks \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_disk_monitor_mocks-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_disk_monitor_mocks-logs-mixed-v3.8.9
        path: ct-unit_disk_monitor_mocks-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_file_handle_cache:
    name: rabbit-ct-unit_file_handle_cache
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_file_handle_cache
      id: tests
      run: |
        mkdir ct-unit_file_handle_cache-logs && chmod 777 ct-unit_file_handle_cache-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_file_handle_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_file_handle_cache-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_file_handle_cache-logs
        path: ct-unit_file_handle_cache-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_file_handle_cache [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_file_handle_cache-logs-v3.7.28 && chmod 777 ct-unit_file_handle_cache-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_file_handle_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_file_handle_cache-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_file_handle_cache-logs-mixed-v3.7.28
        path: ct-unit_file_handle_cache-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_file_handle_cache [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_file_handle_cache-logs-v3.8.9 && chmod 777 ct-unit_file_handle_cache-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_file_handle_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_file_handle_cache-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_file_handle_cache-logs-mixed-v3.8.9
        path: ct-unit_file_handle_cache-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_gen_server2:
    name: rabbit-ct-unit_gen_server2
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_gen_server2
      id: tests
      run: |
        mkdir ct-unit_gen_server2-logs && chmod 777 ct-unit_gen_server2-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gen_server2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_gen_server2-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gen_server2-logs
        path: ct-unit_gen_server2-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gen_server2 [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_gen_server2-logs-v3.7.28 && chmod 777 ct-unit_gen_server2-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gen_server2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_gen_server2-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gen_server2-logs-mixed-v3.7.28
        path: ct-unit_gen_server2-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gen_server2 [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_gen_server2-logs-v3.8.9 && chmod 777 ct-unit_gen_server2-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gen_server2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_gen_server2-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gen_server2-logs-mixed-v3.8.9
        path: ct-unit_gen_server2-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_gm:
    name: rabbit-ct-unit_gm
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_gm
      id: tests
      run: |
        mkdir ct-unit_gm-logs && chmod 777 ct-unit_gm-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_gm-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gm-logs
        path: ct-unit_gm-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gm [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_gm-logs-v3.7.28 && chmod 777 ct-unit_gm-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_gm-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gm-logs-mixed-v3.7.28
        path: ct-unit_gm-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_gm [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_gm-logs-v3.8.9 && chmod 777 ct-unit_gm-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_gm \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_gm-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_gm-logs-mixed-v3.8.9
        path: ct-unit_gm-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_log_config:
    name: rabbit-ct-unit_log_config
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_log_config
      id: tests
      run: |
        mkdir ct-unit_log_config-logs && chmod 777 ct-unit_log_config-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_log_config-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_config-logs
        path: ct-unit_log_config-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_config [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_log_config-logs-v3.7.28 && chmod 777 ct-unit_log_config-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_log_config-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_config-logs-mixed-v3.7.28
        path: ct-unit_log_config-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_config [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_log_config-logs-v3.8.9 && chmod 777 ct-unit_log_config-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_config \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_log_config-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_config-logs-mixed-v3.8.9
        path: ct-unit_log_config-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_log_management:
    name: rabbit-ct-unit_log_management
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_log_management
      id: tests
      run: |
        mkdir ct-unit_log_management-logs && chmod 777 ct-unit_log_management-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_log_management-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_management-logs
        path: ct-unit_log_management-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_management [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_log_management-logs-v3.7.28 && chmod 777 ct-unit_log_management-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_log_management-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_management-logs-mixed-v3.7.28
        path: ct-unit_log_management-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_log_management [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_log_management-logs-v3.8.9 && chmod 777 ct-unit_log_management-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_log_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_log_management-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_log_management-logs-mixed-v3.8.9
        path: ct-unit_log_management-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_operator_policy:
    name: rabbit-ct-unit_operator_policy
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_operator_policy
      id: tests
      run: |
        mkdir ct-unit_operator_policy-logs && chmod 777 ct-unit_operator_policy-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_operator_policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_operator_policy-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_operator_policy-logs
        path: ct-unit_operator_policy-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_operator_policy [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_operator_policy-logs-v3.7.28 && chmod 777 ct-unit_operator_policy-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_operator_policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_operator_policy-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_operator_policy-logs-mixed-v3.7.28
        path: ct-unit_operator_policy-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_operator_policy [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_operator_policy-logs-v3.8.9 && chmod 777 ct-unit_operator_policy-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_operator_policy \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_operator_policy-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_operator_policy-logs-mixed-v3.8.9
        path: ct-unit_operator_policy-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_pg_local:
    name: rabbit-ct-unit_pg_local
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_pg_local
      id: tests
      run: |
        mkdir ct-unit_pg_local-logs && chmod 777 ct-unit_pg_local-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_pg_local \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_pg_local-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_pg_local-logs
        path: ct-unit_pg_local-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_pg_local [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_pg_local-logs-v3.7.28 && chmod 777 ct-unit_pg_local-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_pg_local \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_pg_local-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_pg_local-logs-mixed-v3.7.28
        path: ct-unit_pg_local-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_pg_local [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_pg_local-logs-v3.8.9 && chmod 777 ct-unit_pg_local-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_pg_local \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_pg_local-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_pg_local-logs-mixed-v3.8.9
        path: ct-unit_pg_local-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_plugin_directories:
    name: rabbit-ct-unit_plugin_directories
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_plugin_directories
      id: tests
      run: |
        mkdir ct-unit_plugin_directories-logs && chmod 777 ct-unit_plugin_directories-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_directories \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_plugin_directories-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_directories-logs
        path: ct-unit_plugin_directories-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_directories [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_plugin_directories-logs-v3.7.28 && chmod 777 ct-unit_plugin_directories-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_directories \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_plugin_directories-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_directories-logs-mixed-v3.7.28
        path: ct-unit_plugin_directories-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_directories [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_plugin_directories-logs-v3.8.9 && chmod 777 ct-unit_plugin_directories-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_directories \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_plugin_directories-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_directories-logs-mixed-v3.8.9
        path: ct-unit_plugin_directories-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_plugin_versioning:
    name: rabbit-ct-unit_plugin_versioning
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_plugin_versioning
      id: tests
      run: |
        mkdir ct-unit_plugin_versioning-logs && chmod 777 ct-unit_plugin_versioning-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_versioning \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_plugin_versioning-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_versioning-logs
        path: ct-unit_plugin_versioning-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_versioning [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_plugin_versioning-logs-v3.7.28 && chmod 777 ct-unit_plugin_versioning-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_versioning \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_plugin_versioning-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_versioning-logs-mixed-v3.7.28
        path: ct-unit_plugin_versioning-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_plugin_versioning [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_plugin_versioning-logs-v3.8.9 && chmod 777 ct-unit_plugin_versioning-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_plugin_versioning \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_plugin_versioning-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_plugin_versioning-logs-mixed-v3.8.9
        path: ct-unit_plugin_versioning-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_policy_validators:
    name: rabbit-ct-unit_policy_validators
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_policy_validators
      id: tests
      run: |
        mkdir ct-unit_policy_validators-logs && chmod 777 ct-unit_policy_validators-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_policy_validators \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_policy_validators-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_policy_validators-logs
        path: ct-unit_policy_validators-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_policy_validators [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_policy_validators-logs-v3.7.28 && chmod 777 ct-unit_policy_validators-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_policy_validators \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_policy_validators-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_policy_validators-logs-mixed-v3.7.28
        path: ct-unit_policy_validators-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_policy_validators [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_policy_validators-logs-v3.8.9 && chmod 777 ct-unit_policy_validators-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_policy_validators \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_policy_validators-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_policy_validators-logs-mixed-v3.8.9
        path: ct-unit_policy_validators-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_priority_queue:
    name: rabbit-ct-unit_priority_queue
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_priority_queue
      id: tests
      run: |
        mkdir ct-unit_priority_queue-logs && chmod 777 ct-unit_priority_queue-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_priority_queue-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_priority_queue-logs
        path: ct-unit_priority_queue-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_priority_queue [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_priority_queue-logs-v3.7.28 && chmod 777 ct-unit_priority_queue-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_priority_queue-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_priority_queue-logs-mixed-v3.7.28
        path: ct-unit_priority_queue-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_priority_queue [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_priority_queue-logs-v3.8.9 && chmod 777 ct-unit_priority_queue-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_priority_queue \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_priority_queue-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_priority_queue-logs-mixed-v3.8.9
        path: ct-unit_priority_queue-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_queue_consumers:
    name: rabbit-ct-unit_queue_consumers
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_queue_consumers
      id: tests
      run: |
        mkdir ct-unit_queue_consumers-logs && chmod 777 ct-unit_queue_consumers-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_queue_consumers \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_queue_consumers-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_queue_consumers-logs
        path: ct-unit_queue_consumers-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_queue_consumers [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_queue_consumers-logs-v3.7.28 && chmod 777 ct-unit_queue_consumers-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_queue_consumers \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_queue_consumers-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_queue_consumers-logs-mixed-v3.7.28
        path: ct-unit_queue_consumers-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_queue_consumers [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_queue_consumers-logs-v3.8.9 && chmod 777 ct-unit_queue_consumers-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_queue_consumers \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_queue_consumers-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_queue_consumers-logs-mixed-v3.8.9
        path: ct-unit_queue_consumers-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_stats_and_metrics:
    name: rabbit-ct-unit_stats_and_metrics
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_stats_and_metrics
      id: tests
      run: |
        mkdir ct-unit_stats_and_metrics-logs && chmod 777 ct-unit_stats_and_metrics-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_stats_and_metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_stats_and_metrics-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_stats_and_metrics-logs
        path: ct-unit_stats_and_metrics-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_stats_and_metrics [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_stats_and_metrics-logs-v3.7.28 && chmod 777 ct-unit_stats_and_metrics-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_stats_and_metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_stats_and_metrics-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_stats_and_metrics-logs-mixed-v3.7.28
        path: ct-unit_stats_and_metrics-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_stats_and_metrics [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_stats_and_metrics-logs-v3.8.9 && chmod 777 ct-unit_stats_and_metrics-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_stats_and_metrics \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_stats_and_metrics-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_stats_and_metrics-logs-mixed-v3.8.9
        path: ct-unit_stats_and_metrics-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_supervisor2:
    name: rabbit-ct-unit_supervisor2
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_supervisor2
      id: tests
      run: |
        mkdir ct-unit_supervisor2-logs && chmod 777 ct-unit_supervisor2-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_supervisor2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_supervisor2-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_supervisor2-logs
        path: ct-unit_supervisor2-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_supervisor2 [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_supervisor2-logs-v3.7.28 && chmod 777 ct-unit_supervisor2-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_supervisor2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_supervisor2-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_supervisor2-logs-mixed-v3.7.28
        path: ct-unit_supervisor2-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_supervisor2 [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_supervisor2-logs-v3.8.9 && chmod 777 ct-unit_supervisor2-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_supervisor2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_supervisor2-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_supervisor2-logs-mixed-v3.8.9
        path: ct-unit_supervisor2-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-unit_vm_memory_monitor:
    name: rabbit-ct-unit_vm_memory_monitor
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-unit_vm_memory_monitor
      id: tests
      run: |
        mkdir ct-unit_vm_memory_monitor-logs && chmod 777 ct-unit_vm_memory_monitor-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_vm_memory_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-unit_vm_memory_monitor-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-unit_vm_memory_monitor-logs
        path: ct-unit_vm_memory_monitor-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_vm_memory_monitor [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-unit_vm_memory_monitor-logs-v3.7.28 && chmod 777 ct-unit_vm_memory_monitor-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_vm_memory_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-unit_vm_memory_monitor-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-unit_vm_memory_monitor-logs-mixed-v3.7.28
        path: ct-unit_vm_memory_monitor-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-unit_vm_memory_monitor [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-unit_vm_memory_monitor-logs-v3.8.9 && chmod 777 ct-unit_vm_memory_monitor-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=unit_vm_memory_monitor \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-unit_vm_memory_monitor-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-unit_vm_memory_monitor-logs-mixed-v3.8.9
        path: ct-unit_vm_memory_monitor-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-upgrade_preparation:
    name: rabbit-ct-upgrade_preparation
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-upgrade_preparation
      id: tests
      run: |
        mkdir ct-upgrade_preparation-logs && chmod 777 ct-upgrade_preparation-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=upgrade_preparation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-upgrade_preparation-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-upgrade_preparation-logs
        path: ct-upgrade_preparation-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-upgrade_preparation [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-upgrade_preparation-logs-v3.7.28 && chmod 777 ct-upgrade_preparation-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=upgrade_preparation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-upgrade_preparation-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-upgrade_preparation-logs-mixed-v3.7.28
        path: ct-upgrade_preparation-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-upgrade_preparation [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-upgrade_preparation-logs-v3.8.9 && chmod 777 ct-upgrade_preparation-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=upgrade_preparation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-upgrade_preparation-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-upgrade_preparation-logs-mixed-v3.8.9
        path: ct-upgrade_preparation-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit-ct-vhost:
    name: rabbit-ct-vhost
    needs:
    - prepare
    - rabbit-checks
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RUN ct-vhost
      id: tests
      run: |
        mkdir ct-vhost-logs && chmod 777 ct-vhost-logs
        docker run \
          --env project=rabbit \
          --env CT_SUITE=vhost \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --volume ${PWD}/ct-vhost-logs:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests.outcome == 'failure'
      with:
        name: rabbit-ct-vhost-logs
        path: ct-vhost-logs/*-ct-logs-*.tar.xz
    - name: RUN ct-vhost [mixed v3.7.28]
      id: tests-v3_7_28
      run: |
        mkdir ct-vhost-logs-v3.7.28 && chmod 777 ct-vhost-logs-v3.7.28
        docker run \
          --env project=rabbit \
          --env CT_SUITE=vhost \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.7.28 \
          --volume ${PWD}/ct-vhost-logs-v3.7.28:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.7.28]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_7_28.outcome == 'failure'
      with:
        name: rabbit-ct-vhost-logs-mixed-v3.7.28
        path: ct-vhost-logs-v3.7.28/*-ct-logs-*.tar.xz
    - name: RUN ct-vhost [mixed v3.8.9]
      id: tests-v3_8_9
      run: |
        mkdir ct-vhost-logs-v3.8.9 && chmod 777 ct-vhost-logs-v3.8.9
        docker run \
          --env project=rabbit \
          --env CT_SUITE=vhost \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env SECONDARY_UMBRELLA_VERSION=v3.8.9 \
          --volume ${PWD}/ct-vhost-logs-v3.8.9:/workspace/ct-logs \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/ct-suite.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed v3.8.9]
      uses: actions/upload-artifact@v2-preview
      if: failure() && steps.tests-v3_8_9.outcome == 'failure'
      with:
        name: rabbit-ct-vhost-logs-mixed-v3.8.9
        path: ct-vhost-logs-v3.8.9/*-ct-logs-*.tar.xz
  rabbit:
    name: rabbit
    needs:
    - rabbit-checks
    - rabbit-ct-amqqueue_backward_compatibility
    - rabbit-ct-backing_queue
    - rabbit-ct-channel_interceptor
    - rabbit-ct-channel_operation_timeout
    - rabbit-ct-cluster
    - rabbit-ct-cluster_rename
    - rabbit-ct-clustering_management
    - rabbit-ct-config_schema
    - rabbit-ct-confirms_rejects
    - rabbit-ct-consumer_timeout
    - rabbit-ct-crashing_queues
    - rabbit-ct-dead_lettering
    - rabbit-ct-definition_import
    - rabbit-ct-disconnect_detected_during_alarm
    - rabbit-ct-dynamic_ha
    - rabbit-ct-dynamic_qq
    - rabbit-ct-eager_sync
    - rabbit-ct-feature_flags
    - rabbit-ct-lazy_queue
    - rabbit-ct-list_consumers_sanity_check
    - rabbit-ct-list_queues_online_and_offline
    - rabbit-ct-maintenance_mode
    - rabbit-ct-many_node_ha
    - rabbit-ct-message_size_limit
    - rabbit-ct-metrics
    - rabbit-ct-mirrored_supervisor
    - rabbit-ct-msg_store
    - rabbit-ct-peer_discovery_classic_config
    - rabbit-ct-peer_discovery_dns
    - rabbit-ct-per_user_connection_channel_limit
    - rabbit-ct-per_user_connection_channel_limit_partitions
    - rabbit-ct-per_user_connection_channel_tracking
    - rabbit-ct-per_user_connection_tracking
    - rabbit-ct-per_vhost_connection_limit
    - rabbit-ct-per_vhost_connection_limit_partitions
    - rabbit-ct-per_vhost_msg_store
    - rabbit-ct-per_vhost_queue_limit
    - rabbit-ct-policy
    - rabbit-ct-priority_queue
    - rabbit-ct-priority_queue_recovery
    - rabbit-ct-product_info
    - rabbit-ct-proxy_protocol
    - rabbit-ct-publisher_confirms_parallel
    - rabbit-ct-queue_length_limits
    - rabbit-ct-queue_master_location
    - rabbit-ct-queue_parallel
    - rabbit-ct-quorum_queue
    - rabbit-ct-rabbit_core_metrics_gc
    - rabbit-ct-rabbit_fifo
    - rabbit-ct-rabbit_fifo_int
    - rabbit-ct-rabbit_fifo_prop
    - rabbit-ct-rabbit_fifo_v0
    - rabbit-ct-rabbitmq_queues_cli_integration
    - rabbit-ct-rabbitmqctl_integration
    - rabbit-ct-rabbitmqctl_shutdown
    - rabbit-ct-signal_handling
    - rabbit-ct-simple_ha
    - rabbit-ct-single_active_consumer
    - rabbit-ct-sup_delayed_restart
    - rabbit-ct-sync_detection
    - rabbit-ct-term_to_binary_compat_prop
    - rabbit-ct-topic_permission
    - rabbit-ct-unit_access_control
    - rabbit-ct-unit_access_control_authn_authz_context_propagation
    - rabbit-ct-unit_access_control_credential_validation
    - rabbit-ct-unit_amqp091_content_framing
    - rabbit-ct-unit_amqp091_server_properties
    - rabbit-ct-unit_app_management
    - rabbit-ct-unit_cluster_formation_locking_mocks
    - rabbit-ct-unit_collections
    - rabbit-ct-unit_config_value_encryption
    - rabbit-ct-unit_connection_tracking
    - rabbit-ct-unit_credit_flow
    - rabbit-ct-unit_disk_monitor
    - rabbit-ct-unit_disk_monitor_mocks
    - rabbit-ct-unit_file_handle_cache
    - rabbit-ct-unit_gen_server2
    - rabbit-ct-unit_gm
    - rabbit-ct-unit_log_config
    - rabbit-ct-unit_log_management
    - rabbit-ct-unit_operator_policy
    - rabbit-ct-unit_pg_local
    - rabbit-ct-unit_plugin_directories
    - rabbit-ct-unit_plugin_versioning
    - rabbit-ct-unit_policy_validators
    - rabbit-ct-unit_priority_queue
    - rabbit-ct-unit_queue_consumers
    - rabbit-ct-unit_stats_and_metrics
    - rabbit-ct-unit_supervisor2
    - rabbit-ct-unit_vm_memory_monitor
    - rabbit-ct-upgrade_preparation
    - rabbit-ct-vhost
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'') && (success() || failure())'
    steps:
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}+rabbit
        path: ci-rabbit.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci-rabbit.tar
    - name: RECORD STEP FINISH
      run: |
        docker run \
          --env project=rabbit \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ needs.rabbit-checks.outputs.step_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci-rabbit:erlang-22.3-rabbitmq-${{ github.sha }} \
          /workspace/rabbitmq/ci/scripts/collect.sh
  amqp_client:
    name: amqp_client
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp_client-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp10_client:
    name: amqp10_client
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp10_client \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp10_client-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  amqp10_common:
    name: amqp10_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=amqp10_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: amqp10_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_amqp1_0:
    name: rabbitmq_amqp1_0
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_amqp1_0 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_amqp1_0-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_cache:
    name: rabbitmq_auth_backend_cache
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_cache \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_cache-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_http:
    name: rabbitmq_auth_backend_http
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_http \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_http-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_ldap:
    name: rabbitmq_auth_backend_ldap
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_ldap \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_ldap-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_backend_oauth2:
    name: rabbitmq_auth_backend_oauth2
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_backend_oauth2 \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_backend_oauth2-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_auth_mechanism_ssl:
    name: rabbitmq_auth_mechanism_ssl
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_auth_mechanism_ssl \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_auth_mechanism_ssl-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_aws:
    name: rabbitmq_aws
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_aws-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_cli:
    name: rabbitmq_cli
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir broker-logs && chmod 777 broker-logs
        docker run \
          --env project=rabbitmq_cli \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/broker-logs:/workspace/broker-logs \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/rabbitmq_cli.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_cli-broker-logs
        path: broker-logs/broker-logs.tar.xz
  rabbitmq_consistent_hash_exchange:
    name: rabbitmq_consistent_hash_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_consistent_hash_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_consistent_hash_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_event_exchange:
    name: rabbitmq_event_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_event_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_event_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation:
    name: rabbitmq_federation
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_federation_management:
    name: rabbitmq_federation_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_federation_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_federation_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_jms_topic_exchange:
    name: rabbitmq_jms_topic_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_jms_topic_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_jms_topic_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management:
    name: rabbitmq_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_management_agent:
    name: rabbitmq_management_agent
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_management_agent \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_management_agent-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_mqtt:
    name: rabbitmq_mqtt
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_mqtt-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_common:
    name: rabbitmq_peer_discovery_common
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_common \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_common-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_aws:
    name: rabbitmq_peer_discovery_aws
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: PREPARE TERRAFORM SECRETS
      run: |
        mkdir terraform && chmod 777 terraform
        echo "${{ secrets.TERRAFORM_SSH_KEY }}" > terraform/id_rsa_terraform
        echo "${{ secrets.TERRAFORM_SSH_KEY_PUB }}" > terraform/id_rsa_terraform.pub
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_aws \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --env ERLANG_VERSION=22.3 \
          --env AWS_ACCESS_KEY_ID=${{ secrets.CONCOURSE_AWS_ACCESS_KEY_ID }} \
          --env AWS_SECRET_ACCESS_KEY=${{ secrets.CONCOURSE_AWS_SECRET_ACCESS_KEY }} \
          --env SSH_KEY=/workspace/terraform/id_rsa_terraform \
          --volume ${PWD}/terraform:/workspace/terraform \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_aws-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_k8s:
    name: rabbitmq_peer_discovery_k8s
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_k8s \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_k8s-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_consul:
    name: rabbitmq_peer_discovery_consul
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_consul \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_consul-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_peer_discovery_etcd:
    name: rabbitmq_peer_discovery_etcd
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_peer_discovery_etcd \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_peer_discovery_etcd-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_prometheus:
    name: rabbitmq_prometheus
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_prometheus \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_prometheus-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_random_exchange:
    name: rabbitmq_random_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_random_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_random_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_recent_history_exchange:
    name: rabbitmq_recent_history_exchange
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_recent_history_exchange \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_recent_history_exchange-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_sharding:
    name: rabbitmq_sharding
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_sharding \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_sharding-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel:
    name: rabbitmq_shovel
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_shovel_management:
    name: rabbitmq_shovel_management
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_shovel_management \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_shovel_management-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_stomp:
    name: rabbitmq_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_top:
    name: rabbitmq_top
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_top \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_top-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_tracing:
    name: rabbitmq_tracing
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_tracing \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_tracing-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_trust_store:
    name: rabbitmq_trust_store
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_trust_store \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_trust_store-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_dispatch:
    name: rabbitmq_web_dispatch
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_dispatch \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_dispatch-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt:
    name: rabbitmq_web_mqtt
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_mqtt_examples:
    name: rabbitmq_web_mqtt_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_mqtt_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_mqtt_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp:
    name: rabbitmq_web_stomp
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  rabbitmq_web_stomp_examples:
    name: rabbitmq_web_stomp_examples
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RUN TESTS
      run: |
        mkdir ct-logs && chmod 777 ct-logs
        docker run \
          --env project=rabbitmq_web_stomp_examples \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
           \
          --volume ${PWD}/ct-logs:/workspace/ct-logs \
          --oom-kill-disable \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/tests.sh
    - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: rabbitmq_web_stomp_examples-ct-logs
        path: ct-logs/*-ct-logs-*.tar.xz
  package-generic-unix:
    name: package-generic-unix
    needs:
    - prepare
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'')'
    steps:
    - name: RECORD STEP START
      id: buildevents
      run: |
        echo "::set-output name=step_start::$(date +%s)"
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: PACKAGE GENERIC UNIX
      run: |
        mkdir PACKAGES && chmod 777 PACKAGES
        docker run \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          --volume ${PWD}/PACKAGES:/workspace/rabbitmq/PACKAGES \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/package_generic_unix.sh
    - name: UPLOAD GENERIC UNIX PACKAGE ARTIFACT
      uses: actions/upload-artifact@v2-preview
      with:
        name: rabbitmq-server-generic-unix.tar.xz
        path: PACKAGES/rabbitmq-server-generic-unix-*.tar.xz
    - name: RECORD STEP FINISH
      if: always()
      run: |
        docker run \
          --env project=packaging \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env STEP_START=${{ steps.buildevents.outputs.step_start }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/collect.sh
  finish:
    name: finish
    needs:
    - prepare
    - xref
    - rabbit_common
    - rabbit
    - amqp_client
    - amqp10_client
    - amqp10_common
    - rabbitmq_amqp1_0
    - rabbitmq_auth_backend_cache
    - rabbitmq_auth_backend_http
    - rabbitmq_auth_backend_ldap
    - rabbitmq_auth_backend_oauth2
    - rabbitmq_auth_mechanism_ssl
    - rabbitmq_aws
    - rabbitmq_cli
    - rabbitmq_consistent_hash_exchange
    - rabbitmq_event_exchange
    - rabbitmq_federation
    - rabbitmq_federation_management
    - rabbitmq_jms_topic_exchange
    - rabbitmq_management
    - rabbitmq_management_agent
    - rabbitmq_mqtt
    - rabbitmq_peer_discovery_common
    - rabbitmq_peer_discovery_aws
    - rabbitmq_peer_discovery_k8s
    - rabbitmq_peer_discovery_consul
    - rabbitmq_peer_discovery_etcd
    - rabbitmq_prometheus
    - rabbitmq_random_exchange
    - rabbitmq_recent_history_exchange
    - rabbitmq_sharding
    - rabbitmq_shovel
    - rabbitmq_shovel_management
    - rabbitmq_stomp
    - rabbitmq_top
    - rabbitmq_tracing
    - rabbitmq_trust_store
    - rabbitmq_web_dispatch
    - rabbitmq_web_mqtt
    - rabbitmq_web_mqtt_examples
    - rabbitmq_web_stomp
    - rabbitmq_web_stomp_examples
    - package-generic-unix
    runs-on: ubuntu-18.04
    if: '!contains(github.event.head_commit.message, ''[ci skip]'') && (success() || failure())'
    steps:
    - uses: technote-space/workflow-conclusion-action@v1
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCR_JSON_KEY }}
        export_default_credentials: true
    - uses: actions/cache@v2
      with:
        key: erlang-22.3-rabbitmq-${{ github.sha }}
        path: ci.tar
    - name: LOAD CI DOCKER IMAGE FROM CACHE
      run: |
        docker load --input ci.tar
    - name: RECORD BUILD FINISH
      run: |
        echo -n "${{ env.WORKFLOW_CONCLUSION }}" > conclusion

        gsutil cp conclusion \
          'gs://monorepo_github_actions_conclusions/${{ github.sha }}/${{ github.workflow }}'

        docker run \
          --env GITHUB_RUN_ID=${{ github.run_id }} \
          --env BUILDEVENT_APIKEY=${{ secrets.HONEYCOMB_API_KEY }} \
          --env BUILD_START=${{ needs.prepare.outputs.build_start }} \
          --env BUILD_RESULT=${{ env.WORKFLOW_CONCLUSION }} \
          eu.gcr.io/cf-rabbitmq-core/ci:erlang-22.3-rabbitmq-${{ github.sha }} \
          ci/scripts/finish.sh
